{"name": "test_search_and_click[ios]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Authorization Required", "trace": "fn = <selene.core.conditions.CollectionCondition object at 0x000002C23B275310>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n.venv\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\selene\\core\\condition.py:174: in __call__\n    return self._fn(entity)\n.venv\\Lib\\site-packages\\selene\\core\\condition.py:144: in fn\n    actual = query(entity)\n.venv\\Lib\\site-packages\\selene\\core\\match.py:327: in size\n    return len(collection())\n.venv\\Lib\\site-packages\\selene\\core\\entity.py:648: in __call__\n    return self.locate()\n.venv\\Lib\\site-packages\\selene\\core\\entity.py:641: in locate\n    return self._locator()\n.venv\\Lib\\site-packages\\selene\\core\\locator.py:34: in __call__\n    return self._locate()\n.venv\\Lib\\site-packages\\selene\\core\\_browser.py:84: in <lambda>\n    Locator(f'{self}.all({by})', lambda: self.driver.find_elements(*by)),\n.venv\\Lib\\site-packages\\selene\\core\\_browser.py:34: in driver\n    return self.config.driver\n.venv\\Lib\\site-packages\\selene\\core\\configuration.py:305: in __get__\n    driver = config.build_driver_strategy(config)\n.venv\\Lib\\site-packages\\selene\\core\\configuration.py:129: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n.venv\\Lib\\site-packages\\selene\\core\\configuration.py:120: in build_appium_driver\n    return webdriver.Remote(\n.venv\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:227: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:250: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:319: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002C23787B890>, response = {'status': 401, 'value': 'Authorization Required'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n>           raise exception_class(value)\nE           selenium.common.exceptions.WebDriverException: Message: Authorization Required\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:196: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.parametrize('mobile_os_settings',\n                             [('13', 'ios', 'iPhone 11')],\n                             ids=['ios'],\n                             indirect=True)\n    def test_search_and_click():\n    \n        with step('Searching page \"Open Heart Protocol'):\n            results = browser.all((AppiumBy.ACCESSIBILITY_ID, '\tXCUIElementTypeTable'))\n>           results.should(have.size_greater_than(0))\n\ntests\\ios_app\\test_wikipedia_ios.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\selene\\core\\entity.py:132: in should\n    self.wait.for_(condition)\n.venv\\Lib\\site-packages\\selene\\core\\wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n.venv\\Lib\\site-packages\\selene\\core\\wait.py:148: in logic\n    raise self._hook_failure(failure)\n.venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n.venv\\Lib\\site-packages\\selene\\core\\configuration.py:1411: in save_and_log_screenshot\n    path = self._save_screenshot_strategy(self)  # type: ignore\n.venv\\Lib\\site-packages\\selene\\core\\configuration.py:1238: in <lambda>\n    lambda config, path=None: fp.thread(  # type: ignore\n.venv\\Lib\\site-packages\\selene\\common\\fp.py:83: in thread\n    return pipe(*functions)(arg)\n.venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n.venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n.venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n.venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n.venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n.venv\\Lib\\site-packages\\selene\\core\\configuration.py:1269: in <lambda>\n    lambda path: (path if config.driver.get_screenshot_as_file(path) else None),\n.venv\\Lib\\site-packages\\selene\\core\\configuration.py:305: in __get__\n    driver = config.build_driver_strategy(config)\n.venv\\Lib\\site-packages\\selene\\core\\configuration.py:129: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n.venv\\Lib\\site-packages\\selene\\core\\configuration.py:120: in build_appium_driver\n    return webdriver.Remote(\n.venv\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:227: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:250: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:319: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002C23B2C2530>, response = {'status': 401, 'value': 'Authorization Required'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n>           raise exception_class(value)\nE           selenium.common.exceptions.WebDriverException: Message: Authorization Required\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:196: WebDriverException"}, "steps": [{"name": "Searching page \"Open Heart Protocol", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Authorization Required\n\n", "trace": "  File \"E:\\Soft\\QA_Python\\qa_hmw19\\tests\\ios_app\\test_wikipedia_ios.py\", line 14, in test_search_and_click\n    results.should(have.size_greater_than(0))\n    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selene\\core\\entity.py\", line 132, in should\n    self.wait.for_(condition)\n    ~~~~~~~~~~~~~~^^^^^^^^^^^\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 150, in for_\n    return self._decorator(self)(logic)(fn)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 148, in logic\n    raise self._hook_failure(failure)\n          ~~~~~~~~~~~~~~~~~~^^^^^^^^^\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selene\\common\\fp.py\", line 73, in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n                             ~^^^\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 1411, in save_and_log_screenshot\n    path = self._save_screenshot_strategy(self)  # type: ignore\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 1238, in <lambda>\n    lambda config, path=None: fp.thread(  # type: ignore\n                              ~~~~~~~~~^^^^^^^^^^^^^^^^^\n        path,\n        ^^^^^\n    ...<35 lines>...\n        #  think on how we can resolve this...\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selene\\common\\fp.py\", line 83, in thread\n    return pipe(*functions)(arg)\n           ~~~~~~~~~~~~~~~~^^^^^\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selene\\common\\fp.py\", line 73, in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n                           ~^^^^^^\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selene\\common\\fp.py\", line 73, in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n                           ~^^^^^^\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selene\\common\\fp.py\", line 73, in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n                           ~^^^^^^\n  [Previous line repeated 2 more times]\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 1269, in <lambda>\n    lambda path: (path if config.driver.get_screenshot_as_file(path) else None),\n                          ^^^^^^^^^^^^^\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 305, in __get__\n    driver = config.build_driver_strategy(config)\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 129, in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n           ~~~~~~~~~~~~~~~~~\n    ...<32 lines>...\n        )\n        ~\n    )()\n    ~^^\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 120, in build_appium_driver\n    return webdriver.Remote(\n           ~~~~~~~~~~~~~~~~^\n        command_executor=(\n        ^^^^^^^^^^^^^^^^^^\n    ...<4 lines>...\n        options=config.driver_options,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 227, in __init__\n    super().__init__(\n    ~~~~~~~~~~~~~~~~^\n        command_executor=command_executor,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ...<3 lines>...\n        client_config=client_config,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 250, in __init__\n    self.start_session(capabilities)\n    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 319, in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"E:\\Soft\\QA_Python\\qa_hmw19\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 196, in check_response\n    raise exception_class(value)\n"}, "start": 1737832404729, "stop": 1737832414913}], "parameters": [{"name": "mobile_os_settings", "value": "('13', 'ios', 'iPhone 11')"}], "start": 1737832404729, "stop": 1737832414923, "uuid": "fd253090-b880-421c-b69a-938f9ce5dc85", "historyId": "c7832727f14c11cd8f63e824fb93e45b", "testCaseId": "802e05851ed705b26ec633790c4511e4", "fullName": "tests.ios_app.test_wikipedia_ios#test_search_and_click", "labels": [{"name": "parentSuite", "value": "tests.ios_app"}, {"name": "suite", "value": "test_wikipedia_ios"}, {"name": "host", "value": "Katz-PC"}, {"name": "thread", "value": "31176-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ios_app.test_wikipedia_ios"}]}